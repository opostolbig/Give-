import telebot
from telebot import types
import json
import random
import string
import requests
import time
from datetime import datetime, timedelta
from aiocryptopay import AioCryptoPay, Networks
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7795536845:AAGvBiDeTm2UHNpe-SI_QXz0NrdXBb2QB5o'
bot = telebot.TeleBot(API_TOKEN)

# –¢–æ–∫–µ–Ω CryptoPay
CRYPTO_PAY_TOKEN = '7788959684:AAFM4UkDux1O-7eaNnmS8BkQiyMBkdnKC7c'
crypto = AioCryptoPay(token=CRYPTO_PAY_TOKEN, network=Networks.MAIN_NET)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_FILE = 'database.json'

def load_database():
    try:
        with open(DATABASE_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_database(data):
    with open(DATABASE_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
user_database = load_database()

def get_address_from_coordinates(latitude, longitude):
    url = "https://nominatim.openstreetmap.org/reverse"
    params = {
        'lat': float(latitude),
        'lon': float(longitude),
        'format': 'json',
        'addressdetails': 1,
        'accept-language': 'ru'
    }
    headers = {
        'User-Agent': 'YourBotName/1.0 (your_email@example.com)'
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data.get('display_name', '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}")
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞'
    except requests.RequestException as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É'

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.chat.id)
    if user_id not in user_database or 'location' not in user_database[user_id]:
        markup = types.InlineKeyboardMarkup()
        agreement_button = types.InlineKeyboardButton(
            text='üîí–°–æ–≥–ª–∞—à–µ–Ω–∏–µ', url='https://telegra.ph/Soglashenie-01-11-3'
        )
        send_location_button = types.InlineKeyboardButton(
            text='üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_location'
        )
        markup.add(agreement_button, send_location_button)

        bot.send_message(
            message.chat.id,
            '<blockquote>üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.</blockquote>',
            reply_markup=markup,
            parse_mode='HTML'
        )
    else:
        bot.send_message(
            message.chat.id,
            '<b>–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.</b> üìö –í–≤–µ–¥–∏—Ç–µ /main_menu –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.',
            parse_mode='HTML'
        )

@bot.callback_query_handler(func=lambda call: call.data == 'send_location')
def request_location(call):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    location_button = types.KeyboardButton(text='üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location=True)
    markup.add(location_button)

    bot.send_message(
        call.message.chat.id,
        '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:',
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.message_handler(content_types=['location'])
def save_location(message):
    if message.location:
        user_id = str(message.chat.id)
        if user_id not in user_database or 'location' not in user_database[user_id]:
            user_database[user_id] = user_database.get(user_id, {})
            user_database[user_id]['location'] = {
                'latitude': message.location.latitude,
                'longitude': message.location.longitude
            }
            save_database(user_database)

            bot.send_message(
                message.chat.id,
                'üìÉ <b>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.</b> –í–≤–µ–¥–∏—Ç–µ /main_menu –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                message.chat.id,
                '‚ÑπÔ∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ /main_menu –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.',
                parse_mode='HTML'
            )

@bot.message_handler(commands=['main_menu'])
def main_menu(message):
    user_id = str(message.chat.id)
    markup = types.InlineKeyboardMarkup()
    find_button = types.InlineKeyboardButton(
        text='üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='find_user'
    )
    markup.add(find_button)
    
    if not user_database.get(user_id, {}).get('banned', False):
        support_button = types.InlineKeyboardButton(
            text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support'
        )
        markup.add(support_button)
    
    if not user_database.get(user_id, {}).get('white_list', False):
        white_list_button = types.InlineKeyboardButton(
            text='üíé –ö—É–ø–∏—Ç—å White List', callback_data='buy_white_list'
        )
        markup.add(white_list_button)

    bot.send_message(
        message.chat.id,
        '<b>üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n<blockquote> - –ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.\n - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n - –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å White List" –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏.</blockquote>',
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'find_user')
def find_user(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:',
        parse_mode='HTML'
    )

    bot.register_next_step_handler(call.message, search_user_location)

def search_user_location(message):
    user_id = message.text
    searcher_id = str(message.chat.id)

    try:
        sticker = bot.send_sticker(
            message.chat.id,
            'CAACAgEAAxkBAAELhBJngfqlUCjpMwxz79UjV6GPO12PdAACxQIAAkeAGUTTk7G7rIZ7GjYE'
        )

        time.sleep(2)

        bot.delete_message(message.chat.id, sticker.message_id)

        if user_id in user_database and 'location' in user_database[user_id]:
            if user_database[user_id].get('white_list', False):
                bot.send_message(
                    message.chat.id,
                    "üîí –î–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω White List.",
                    parse_mode='HTML'
                )

                markup = types.InlineKeyboardMarkup()
                user_profile_button = types.InlineKeyboardButton(
                    text="–ü—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ—Å—è",
                    url=f"https://t.me/{message.from_user.username}"
                )
                markup.add(user_profile_button)

                bot.send_message(
                    user_id,
                    f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {searcher_id} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, –Ω–æ –æ–Ω–∞ –∑–∞—â–∏—â–µ–Ω–∞ White List.",
                    reply_markup=markup
                )
            else:
                location = user_database[user_id]['location']
                latitude = location["latitude"]
                longitude = location["longitude"]

                address = get_address_from_coordinates(latitude, longitude)

                bot.send_message(
                    message.chat.id,
                    f'<b>üîç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –Ω–∞–π–¥–µ–Ω–∞:</b>\n\n'
                    f'<blockquote>–®–∏—Ä–æ—Ç–∞: {latitude}\n'
                    f'–î–æ–ª–≥–æ—Ç–∞: {longitude}\n\n'
                    f'–ê–¥—Ä–µ—Å:<code> {address}</code></blockquote>\n\n'
                    f'<a href="https://www.google.com/maps?q={latitude},{longitude}">–û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps</a>',
                    parse_mode='HTML'
                )

                bot.send_message(
                    user_id,
                    f"üîé <b>–í–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{searcher_id}</code>",
                    parse_mode='HTML'
                )
        else:
            bot.send_message(message.chat.id, 'üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', parse_mode='HTML')

    except Exception as e:
        print(f"Error sending sticker: {e}")
        bot.send_message(message.chat.id, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', parse_mode='HTML')

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–ø—Ç–∞–π–º–∞
bot_start_time = time.time()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = '721151979'

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if str(message.chat.id) == ADMIN_ID:
        total_users = len(user_database)
        white_list_count = sum(1 for user in user_database.values() if user.get('white_list', False))
        uptime = time.time() - bot_start_time
        uptime_formatted = str(time.strftime('%H:%M:%S', time.gmtime(uptime)))

        admin_info = f"""
        <b>‚öô Admin Panel</b>

        <blockquote>
        <b>–ö–æ–ª-–≤–æ –ª—é–¥–µ–π:</b> <code>{total_users}</code>
        <b>–ö–æ–ª-–≤–æ White List:</b> <code>{white_list_count}</code>
        <b>–ê–ø—Ç–∞–π–º:</b> <code>{uptime_formatted}</code>
        </blockquote>
        """

        markup = types.InlineKeyboardMarkup()
        send_broadcast_button = types.InlineKeyboardButton(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_broadcast")
        markup.add(send_broadcast_button)

        bot.send_message(
            message.chat.id,
            admin_info,
            parse_mode='HTML',
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.callback_query_handler(func=lambda call: call.data == "send_broadcast")
def send_broadcast(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚úâÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
        parse_mode='HTML'
    )

    bot.register_next_step_handler(call.message, process_broadcast_text)

def process_broadcast_text(message):
    broadcast_text = message.text

    confirmation_text = f"""
    ‚úâÔ∏è <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
    <blockquote>{broadcast_text}</blockquote>
    """

    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_broadcast|{broadcast_text}")
    cancel_button = types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
    markup.add(confirm_button, cancel_button)

    bot.send_message(
        message.chat.id,
        confirmation_text,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_broadcast"))
def confirm_broadcast(call):
    broadcast_text = call.data.split("|")[1]

    for user_id in user_database:
        try:
            bot.send_message(user_id, broadcast_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    )

@bot.callback_query_handler(func=lambda call: call.data == "cancel_broadcast")
def cancel_broadcast(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )

@bot.message_handler(commands=['White'])
def white_list_command(message):
    if str(message.chat.id) != ADMIN_ID:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ White List."
        )
        return

    args = message.text.split()

    if len(args) < 2:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /White 123456789"
        )
        return

    user_id = args[1]

    if user_id in user_database:
        if user_database[user_id].get('white_list', False):
            bot.send_message(
                message.chat.id,
                f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç White List. –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–∫—Ä—ã—Ç–∞."
            )
            return

        markup = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É White List", callback_data=f"confirm_white_list_{user_id}")
        markup.add(confirm_button)

        bot.send_message(
            message.chat.id,
            f'<b>üíé –í—ã–¥–∞—á–∞ White List </b>\n\n'
            f'üë§<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>\n'
            f'üóÇ<b>–ë–¥:</b> <code>–ù–µ—Ç</code>\n\n'
            '<blockquote>–î–ª—è –≤—ã–¥–∞—á–∏ White List –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</blockquote>',
            parse_mode='HTML',
            reply_markup=markup
        )

    else:
        bot.send_message(
            message.chat.id,
            f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_white_list_"))
def confirm_white_list(call):
    user_id = call.data.split("_")[-1]
    if user_id in user_database:
        user_database[user_id]['white_list'] = True
        save_database(user_database)

        bot.send_message(
            user_id,
            "üíé –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω White List! –í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."
        )

        bot.send_message(
            call.message.chat.id,
            f"‚úÖ White List —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –¢–µ–ø–µ—Ä—å –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–∫—Ä—ã—Ç–∞."
        )

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"<b>üíé –í—ã–¥–∞—á–∞ White List </b>\n\n"
                 f'üë§<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>\n'
                 f'üóÇ<b>–ë–¥:</b> <code>–ï—Å—Ç—å</code>\n\n'
                 "<blockquote>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª White List. –ï–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.</blockquote>",
            parse_mode='HTML'
        )
    else:
        bot.send_message(call.message.chat.id, f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == 'support')
def support_menu(call):
    user_id = str(call.message.chat.id)
    if user_database.get(user_id, {}).get('banned', False):
        bot.answer_callback_query(call.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    markup = types.InlineKeyboardMarkup()
    support_button = types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="t.me/alleexxanddeerr")
    chat_button = types.InlineKeyboardButton(text="–ß–∞—Ç", callback_data="open_support_chat")
    markup.add(support_button, chat_button)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º üòÅ",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == 'open_support_chat')
def open_support_chat(call):
    chat_id = str(call.message.chat.id)
    if user_database.get(chat_id, {}).get('banned', False):
        bot.answer_callback_query(call.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    ticket_number = random.randint(1000, 9999)
    user_database[chat_id] = user_database.get(chat_id, {})
    user_database[chat_id]['support_chat'] = True
    user_database[chat_id]['ticket_number'] = ticket_number
    save_database(user_database)

    markup = types.InlineKeyboardMarkup()
    end_chat_button = types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_support_chat")
    markup.add(end_chat_button)

    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"üëã –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π {ticket_number}\n\n"
             "> –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—é—â–∏–π—Å—è –±–æ—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: user_database.get(str(message.chat.id), {}).get('support_chat', False))
def handle_support_message(message):
    user_id = str(message.chat.id)
    admin_id = ADMIN_ID

    markup = types.InlineKeyboardMarkup()
    ban_button = types.InlineKeyboardButton(text="–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_user_{user_id}")
    markup.add(ban_button)

    bot.send_message(
        admin_id,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - @{message.from_user.username} | {user_id}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ - {message.text}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('ban_user_'))
def ban_user(call):
    user_id = call.data.split('_')[2]
    user_database[user_id] = user_database.get(user_id, {})
    user_database[user_id]['banned'] = True
    save_database(user_database)
    bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    end_support_chat_for_user(user_id)
    
    bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")

def end_support_chat_for_user(user_id):
    if user_id in user_database:
        user_database[user_id]['support_chat'] = False
        user_database[user_id]['ticket_number'] = None
        save_database(user_database)
        bot.send_message(user_id, "–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == 'end_support_chat')
def end_support_chat(call):
    chat_id = str(call.message.chat.id)
    end_support_chat_for_user(chat_id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω."
    )

@bot.callback_query_handler(func=lambda call: call.data == 'buy_white_list')
def buy_white_list(call):
    bot.answer_callback_query(call.id)
    
    async def create_invoice():
        invoice = await crypto.create_invoice(asset='USDT', amount='1.5')
        return invoice

    invoice = loop.run_until_complete(create_invoice())
    
    markup = types.InlineKeyboardMarkup()
    pay_button = types.InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.pay_url)
    check_button = types.InlineKeyboardButton(text="‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{invoice.invoice_id}")
    markup.add(pay_button, check_button)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üíé –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ White List\n\n"
             "–¶–µ–Ω–∞ - <code>1.5 USDT</code>\n\n"
             "‚≠ê –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ\n"
             "<blockquote>–í–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏, White List —Å–∫—Ä–æ–µ—Ç –µ—ë –∏ –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.</blockquote>",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('check_payment_'))
def check_payment(call):
    bot.answer_callback_query(call.id)
    invoice_id = int(call.data.split('_')[2])
    
    async def get_invoice():
        invoices = await crypto.get_invoices(invoice_ids=[invoice_id])
        return invoices[0] if invoices else None

    invoice = loop.run_until_complete(get_invoice())

    if invoice:
        if invoice.status == 'active':
            markup = types.InlineKeyboardMarkup()
            check_again_button = types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{invoice_id}")
            new_invoice_button = types.InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç", callback_data="buy_white_list")
            main_menu_button = types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            markup.add(check_again_button, new_invoice_button, main_menu_button)

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùó –û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
            )
        elif invoice.status == 'paid':
            user_id = str(call.from_user.id)
            user_database[user_id]['white_list'] = True
            save_database(user_database)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! White List –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
            )
    else:
        bot.answer_callback_query(call.id, f"–°—á—ë—Ç {invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def return_to_main_menu(call):
    bot.answer_callback_query(call.id)
    main_menu(call.message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)